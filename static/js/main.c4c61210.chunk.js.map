{"version":3,"sources":["screens/Pokemons/PokemonList.tsx","assets/img/magnifier.svg","screens/Pokemons/SearchBar.tsx","screens/Pokemons/ToolBar.tsx","utils/constants.ts","screens/Pokemons/Count.tsx","screens/Pokemons/Pagination.tsx","assets/img/logo.png","components/Loading.tsx","utils/api.ts","screens/Pokemons/hooks/utils/sort.ts","utils/url.ts","utils/normalize.ts","screens/Pokemons/hooks/usePokemons.tsx","screens/Pokemons/hooks/utils/getPokemonsApiUrl.ts","screens/Pokemons/hooks/useToolBar.tsx","screens/Pokemons/index.tsx","screens/Pokemon/NavigationBar.tsx","screens/Pokemon/PokemonImage.tsx","screens/Pokemon/PokemonInformation.tsx","screens/Pokemon/PokemonStatsGraph.tsx","screens/Pokemon/hooks/usePokemon.ts","screens/Pokemon/hooks/utils/getPokemonAPIUrl.ts","screens/Pokemon/hooks/utils/getPokemonAPIData.ts","screens/Pokemon/index.tsx","templates/Header.tsx","App.tsx","index.tsx"],"names":["PokemonsList","pokemons","length","className","map","name","id","urlImg","to","style","textDecoration","src","alt","SearchBar","toolbar","onChange","type","placeholder","value","search","event","target","Magnifier","ToolBar","limit","sort","URL_POKEAPI","Count","count","Pagination","display","offset","onClick","Loading","logo","api","url","params","fetch","then","response","json","sortFilter","ascById","a","b","descById","ascByName","toLowerCase","descByName","random","Math","floor","getImagePokemonUrl","repeat","toString","convertIdToString","usePokemons","useState","setPokemons","status","error","meta","setMeta","useEffect","mounted","pokemonUrl","URL","href","getPokemonsApiUrl","urlUtils","results","stringId","substring","split","pop","parseInt","sortBy","catch","console","log","message","data","useToolBar","setToolbar","prev","Pokemons","NavigationBar","visibility","PokemonImage","PokemonInformation","information","height","weight","PokemonStatsGraph","stats","maxStat","gridTemplateColumns","stat","sentence","randomColor","base_stat","backgroundColor","color","replace","usePokemon","pokemon","setPokemon","isMounted","getPokemonAPIUrl","max","getPokemonAPIData","Pokemon","idPokemon","useParams","Header","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4c61210.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Types\nimport { PokemonListPropsType } from \"./types\";\n\nconst PokemonsList: FC<PokemonListPropsType> = ({ pokemons }) => {\n    if (pokemons.length) {\n        return (\n            <div className=\"pokemon--container--grid\">\n                {pokemons.map(({ name, id, urlImg }) => (\n                    <Link\n                        key={id}\n                        to={`/pokemon/${id}`}\n                        style={{ textDecoration: \"none\" }}\n                    >\n                        <div className=\"card--grid\">\n                            <p>{id}</p>\n                            <h6></h6>\n                            <img src={urlImg} alt={`${name}`} />\n                            <div className=\"card--info\">\n                                <h5>{name}</h5>\n                            </div>\n                        </div>\n                    </Link>\n                ))}\n            </div>\n        );\n    }\n    return (\n        <div className=\"without--pokemons\">\n            <h1>😢</h1>\n            <h2>Sorry!</h2>\n            <p>the pokemon has not been found.</p>\n        </div>\n    );\n};\n\nexport default PokemonsList;\n","export default __webpack_public_path__ + \"static/media/magnifier.6c95e853.svg\";","import React, { FC } from \"react\";\n\n// Utils\nimport Magnifier from \"../../assets/img/magnifier.svg\";\n\n// Types\nimport { SearchPropsType } from \"./types\";\n\nconst SearchBar: FC<SearchPropsType> = ({ toolbar, onChange }) => {\n    return (\n        <div className=\"search-bar\">\n            <div className=\"search-info\">\n                Search for a Pokémon by name or using its National Pokédex\n                number.\n                <p></p>\n            </div>\n            <div className=\"search-box\">\n                <label>Name or Number</label>\n                <input\n                    type=\"search\"\n                    id=\"search-input\"\n                    placeholder=\"Type here\"\n                    value={toolbar.search}\n                    onChange={(event) => {\n                        onChange(\"search\", event.target.value);\n                    }}\n                />\n                <button>\n                    <img src={Magnifier} alt=\"search icon\" />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default SearchBar;\n","import React, { FC } from \"react\";\n\n// Types\nimport { ToolbarPropsType } from \"./types\";\n\nconst ToolBar: FC<ToolbarPropsType> = ({ toolbar, onChange }) => {\n    return (\n        <div className=\"sort-section\">\n            <div id=\"surprise-me\">\n                <p>Surprise me</p>\n            </div>\n            <div className=\"select-items\">\n                <select\n                    name=\"limit-pokemons\"\n                    id=\"limit-pokemons\"\n                    value={toolbar.limit}\n                    onChange={(event) => {\n                        onChange(\"limit\", +event.target.value);\n                    }}\n                >\n                    <option value=\"10\">10</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                </select>\n\n                <select\n                    name=\"sort-pokemons\"\n                    id=\"sort-pokemons\"\n                    value={toolbar.sort}\n                    onChange={(event) =>\n                        onChange(\n                            \"sort\",\n                            event.target\n                                .value as ToolbarPropsType[\"toolbar\"][\"sort\"]\n                        )\n                    }\n                >\n                    <option value=\"ascById\">Ascendent by id</option>\n                    <option value=\"descById\">Descendent by id</option>\n                    <option value=\"ascByName\">Ascendent by name</option>\n                    <option value=\"descByName\">Descendent by name</option>\n                    <option value=\"random\">Random</option>\n                </select>\n            </div>\n        </div>\n    );\n};\n\nexport default ToolBar;\n","export const URL_POKEAPI: string = \"https://pokeapi.co/api/v2/pokemon/\";\n\nexport const MAX_POKEMONS: number = 898;\n","import React, { FC } from \"react\";\n\n// Utils\nimport { MAX_POKEMONS } from \"../../utils/constants\";\n\n// Types\nimport { CountPropsType } from \"./types\";\n\nconst Count: FC<CountPropsType> = ({ count }) => {\n    return (\n        <div className=\"pokemon-count\">\n            <span>\n                Viewing: {count} of {MAX_POKEMONS}\n            </span>\n        </div>\n    );\n};\n\nexport default Count;\n","import React, { FC } from \"react\";\n\n// Utils\nimport { MAX_POKEMONS } from \"../../utils/constants\";\n\n// Types\nimport { PaginationPropsType } from \"./types\";\n\nconst Pagination: FC<PaginationPropsType> = ({ toolbar, onChange }) => {\n    return (\n        <div className=\"pagination\" id=\"pagination\">\n            <button\n                id=\"previous-button\"\n                style={{\n                    display:\n                        toolbar.offset - toolbar.limit < 0 ? \"none\" : \"block\",\n                }}\n                onClick={() => {\n                    const offset =\n                        toolbar.offset - toolbar.limit < 0\n                            ? 0\n                            : toolbar.offset - toolbar.limit;\n                    onChange(\"offset\", offset);\n                }}\n            >\n                &laquo;\n            </button>\n            <button\n                id=\"next-button\"\n                style={{\n                    display:\n                        toolbar.offset + toolbar.limit >= MAX_POKEMONS\n                            ? \"none\"\n                            : \"block\",\n                }}\n                onClick={() => {\n                    const offset = toolbar.offset + toolbar.limit;\n                    onChange(\"offset\", offset);\n                }}\n            >\n                &raquo;\n            </button>\n        </div>\n    );\n};\n\nexport default Pagination;\n","export default __webpack_public_path__ + \"static/media/logo.4427ffd9.png\";","import React from \"react\";\n\n// Images\nimport logo from \"../assets/img/logo.png\";\n\nconst Loading = () => {\n    return (\n        <div className=\"loading\">\n            <hr />\n            <p>Loading...</p>\n            <img src={logo} alt=\"logo\" />\n        </div>\n    );\n};\n\nexport default Loading;\n","export const api = <R = any>(url: string, params: object = {}): Promise<R> =>\n    fetch(url, params).then((response) => response.json());\n","// Type\nimport { PokemonType, ToolbarStateType } from \"../../types\";\n\nconst ascById = (a: PokemonType, b: PokemonType) => a.id - b.id;\n\nconst descById = (a: PokemonType, b: PokemonType) => b.id - a.id;\n\nconst ascByName = (a: PokemonType, b: PokemonType) => {\n    if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return 1;\n    }\n    if (a.name.toLowerCase() < b.name.toLowerCase()) {\n        return -1;\n    }\n    return 0;\n};\n\nconst descByName = (a: PokemonType, b: PokemonType) => {\n    if (a.name.toLowerCase() < b.name.toLowerCase()) {\n        return 1;\n    }\n    if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return -1;\n    }\n    return 0;\n};\n\nconst random = () => Math.floor(Math.random() * 2 - 1);\n\nconst sortFilter = {\n    ascById,\n    descById,\n    ascByName,\n    descByName,\n    random,\n};\nexport default (sortBy: ToolbarStateType[\"sort\"]) => {\n    const sort = sortFilter[sortBy];\n\n    return sort || sortFilter.ascByName;\n};\n","import { convertIdToString } from \"./normalize\";\n\nexport const getImagePokemonUrl = (id: number | null): string => {\n    if (!id) {\n        id = 0;\n    }\n    return `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${convertIdToString(\n        id\n    )}.png`;\n};\n\nexport const getIdFromUrl = (url: string): number => {\n    const stringId = url\n        .substring(0, url.length - 1)\n        .split(\"/\")\n        .pop();\n    if (stringId) {\n        return parseInt(stringId);\n    } else {\n        return 0;\n    }\n};\n","export const convertIdToString = (id: number): string => {\n    const LIMIT_ZEROS = 3;\n    return `${\"0\".repeat(LIMIT_ZEROS - id.toString().length)}${id}`;\n};\n\nexport const abbreviateSpecialWord = (sentence: string): string =>\n    sentence.replace(\"special\", \"sp\");\n","import { useState, useEffect } from \"react\";\n\n// Utils\nimport { getPokemonsApiUrl } from \"./utils/getPokemonsApiUrl\";\nimport { api } from \"../../../utils/api\";\nimport sortFilter from \"./utils/sort\";\nimport * as urlUtils from \"../../../utils/url\";\nimport { isSearchQuery } from \"./utils/isSearchQuery\";\n\n// Types\nimport {\n    PokemonStateType,\n    PokemonMetaStateType,\n    UsePokemonsPropsType,\n    PokemonsAPIRestType,\n    PokemonsAPIResByQueryType,\n} from \"../types\";\n\nconst usePokemons = ({ toolbar }: UsePokemonsPropsType) => {\n    const [pokemons, setPokemons] = useState<PokemonStateType>([]);\n    const [meta, setMeta] = useState<PokemonMetaStateType>({\n        status: \"idle\",\n        error: \"\",\n    });\n\n    useEffect(() => {\n        let mounted = true;\n        setMeta({ status: \"loading\", error: \"\" });\n        const pokemonUrl = getPokemonsApiUrl({\n            limit: toolbar.limit,\n            offset: toolbar.offset,\n            search: toolbar.search,\n        });\n        api<PokemonsAPIRestType | PokemonsAPIResByQueryType>(pokemonUrl)\n            .then((response) => {\n                if (!mounted) return;\n\n                if (isSearchQuery(response, toolbar.search)) {\n                    if (response) {\n                        setPokemons([\n                            {\n                                id: response.id,\n                                name: response.name,\n                                urlImg: urlUtils.getImagePokemonUrl(\n                                    response.id\n                                ),\n                            },\n                        ]);\n                    } else {\n                        setPokemons([]);\n                    }\n                } else {\n                    const pokemons: PokemonStateType = response.results\n                        .map(({ name, url }) => {\n                            const id = urlUtils.getIdFromUrl(url);\n                            return {\n                                id,\n                                name,\n                                urlImg: urlUtils.getImagePokemonUrl(id),\n                            };\n                        })\n                        .sort(sortFilter(toolbar.sort));\n                    setPokemons(pokemons);\n                }\n                setMeta({ status: \"loaded\", error: \"\" });\n            })\n            .catch((error) => {\n                console.log({ error });\n                setPokemons([]);\n                if (!toolbar.search) {\n                    setMeta({\n                        error:\n                            error.message ||\n                            \"an error occurred getting the pokemons\",\n                        status: \"loaded\",\n                    });\n                } else {\n                    setMeta({\n                        error: \"Pokemon not found\",\n                        status: \"loaded\",\n                    });\n                }\n            });\n        return () => {\n            mounted = false;\n        };\n    }, [toolbar.limit, toolbar.offset, toolbar.sort, toolbar.search]);\n\n    return {\n        data: pokemons,\n        meta,\n    };\n};\nexport default usePokemons;\n","// Utils params\nimport { URL_POKEAPI } from \"../../../../utils/constants\";\n\n// Types\nimport { ToolbarStateType } from \"../../types\";\n\nexport const getPokemonsApiUrl = ({\n    offset,\n    limit,\n    search,\n}: Pick<ToolbarStateType, \"offset\" | \"limit\" | \"search\">): string => {\n    if (search) return URL_POKEAPI + search.toLowerCase();\n    const url = new URL(URL_POKEAPI);\n    url.search = `offset=${offset}&limit=${limit}`;\n\n    return url.href;\n};\n","import { useState } from \"react\";\n\n// Types\nimport { ToolbarStateType } from \"../types\";\n\nconst useToolBar = () => {\n    const [toolbar, setToolbar] = useState<ToolbarStateType>({\n        search: \"\",\n        limit: 10,\n        offset: 0,\n        sort: \"ascById\",\n    });\n\n    const onChange = <T extends keyof ToolbarStateType>(\n        target: T,\n        value: ToolbarStateType[T]\n    ) => {\n        setToolbar((prev) => ({ ...prev, [target]: value }));\n    };\n\n    return { data: toolbar, onChange };\n};\n\nexport default useToolBar;\n","import React from \"react\";\n\n//  Components\nimport PokemonsList from \"./PokemonList\";\nimport SearchBar from \"./SearchBar\";\nimport ToolBar from \"./ToolBar\";\nimport Count from \"./Count\";\nimport Pagination from \"./Pagination\";\nimport Loading from \"../../components/Loading\";\n\n// Hooks\nimport usePokemons from \"./hooks/usePokemons\";\nimport useToolBar from \"./hooks/useToolBar\";\n\nconst Pokemons = () => {\n    const toolbar = useToolBar();\n    const pokemons = usePokemons({\n        toolbar: toolbar.data,\n    });\n\n    if (pokemons.meta.status === \"loading\") {\n        return <Loading></Loading>;\n    }\n    return (\n        <>\n            <SearchBar toolbar={toolbar.data} onChange={toolbar.onChange} />\n            <div className=\"container\">\n                <ToolBar toolbar={toolbar.data} onChange={toolbar.onChange} />\n                <Count count={pokemons.data.length} />\n                <PokemonsList pokemons={pokemons.data} />\n                <Pagination\n                    toolbar={toolbar.data}\n                    onChange={toolbar.onChange}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default Pokemons;\n","import React, { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Utils Params\nimport { MAX_POKEMONS } from \"../../utils/constants\";\n\n// Types\nimport { NavigationBarPropsType } from \"./types\";\n\nconst NavigationBar: FC<NavigationBarPropsType> = ({ id, name }) => {\n    return (\n        <div className=\"select-bar\">\n            <div className=\"pokemon-bar\" id=\"pokemon-bar\">\n                <Link\n                    to={`/pokemon/${id - 1}`}\n                    style={{\n                        visibility: id - 1 > 0 ? \"visible\" : \"hidden\",\n                    }}\n                >\n                    &laquo; Anterior\n                </Link>\n                <div className=\"actual-pokemon\">{`${id} - ${name}`}</div>\n                <Link\n                    to={`/pokemon/${id + 1}`}\n                    style={{\n                        visibility:\n                            id + 1 < MAX_POKEMONS ? \"visible\" : \"hidden\",\n                    }}\n                >\n                    Siguiente &raquo;\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default NavigationBar;\n","import React, { FC } from \"react\";\n\n// Types\nimport { PokemonImagePropsType } from \"./types\";\n\nconst PokemonImage: FC<PokemonImagePropsType> = ({ urlImg, name }) => {\n    return (\n        <div className=\"img-container\" id=\"img-container\">\n            <img src={urlImg} alt={`${name}`} />\n        </div>\n    );\n};\n\nexport default PokemonImage;\n","import React, { FC } from \"react\";\n\n// Types\nimport { PokemonInformationPropsType } from \"./types\";\n\nconst PokemonInformation: FC<PokemonInformationPropsType> = ({\n    information,\n}) => {\n    return (\n        <div className=\"information--pokemon\" id=\"information--pokemon\">\n            <div>\n                <h4>Id</h4>\n                <p> {information.id}</p>{\" \"}\n            </div>\n            <div>\n                <h4>Name</h4> <p>{information.name}</p>\n            </div>\n            <div>\n                <h4>Height</h4> <p> {information.height}</p>\n            </div>\n            <div>\n                <h4>Weight</h4> <p>{information.weight}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default PokemonInformation;\n","import React, { FC } from \"react\";\n\n// Utils\nimport { abbreviateSpecialWord } from \"../../utils/normalize\";\n\n// Types\nimport { PokemonStatsGraphPropsType } from \"./types\";\n\nconst PokemonStatsGraph: FC<PokemonStatsGraphPropsType> = ({\n    stats,\n    maxStat,\n}) => {\n    return (\n        <div\n            className=\"stats--pokemon\"\n            id=\"stats--pokemon\"\n            style={{\n                gridTemplateColumns: \"1fr \".repeat(stats.length),\n            }}\n        >\n            {stats.map((stat) => {\n                const randomColor = `rgb(${Math.floor(\n                    Math.random() * 255\n                )}, ${Math.floor(Math.random() * 255)}, ${Math.floor(\n                    Math.random() * 255\n                )})`;\n\n                return (\n                    <div\n                        key={stat.stat.name}\n                        style={{\n                            height: `${(stat.base_stat / maxStat) * 100}%`,\n                            backgroundColor: `${randomColor}`,\n                        }}\n                    >\n                        <p\n                            id=\"stat-value\"\n                            style={{\n                                color: `${randomColor}`,\n                            }}\n                        >\n                            {stat.base_stat}\n                        </p>\n                        <p>{abbreviateSpecialWord(stat.stat.name)}</p>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default PokemonStatsGraph;\n","import { useEffect, useState } from \"react\";\n\n// Utils\nimport { getPokemonAPIUrl } from \"./utils/getPokemonAPIUrl\";\nimport { getPokemonAPIData } from \"./utils/getPokemonAPIData\";\nimport { api } from \"../../../utils/api\";\n\n// Types\nimport {\n    PokemonType,\n    PokemonsAPIResQueryByIdType,\n    UsePokemonPropsType,\n    PokemonMetaStateType,\n} from \"../types\";\n\nconst usePokemon = ({ id }: UsePokemonPropsType) => {\n    const [pokemon, setPokemon] = useState<PokemonType>({\n        id: 0,\n        name: \"\",\n        urlImg: \"\",\n        height: 0,\n        weight: 0,\n        stats: [],\n        maxStat: 0,\n    });\n    const [meta, setMeta] = useState<PokemonMetaStateType>({\n        status: \"idle\",\n        error: \"\",\n    });\n\n    useEffect(() => {\n        let isMounted = true;\n        setMeta({ status: \"loading\", error: \"\" });\n        api<PokemonsAPIResQueryByIdType>(getPokemonAPIUrl(id))\n            .then((response) => {\n                if (!isMounted) return;\n                setPokemon(getPokemonAPIData(response));\n                setMeta({ status: \"loaded\", error: \"\" });\n            })\n            .catch((error) => {\n                console.log(error);\n                setPokemon({\n                    id: 0,\n                    name: \"\",\n                    urlImg: \"\",\n                    height: 0,\n                    weight: 0,\n                    stats: [],\n                    maxStat: 0,\n                });\n                setMeta({\n                    status: \"loaded\",\n                    error: \"an error occurred getting the pokemon data\",\n                });\n            });\n        return () => {\n            isMounted = false;\n        };\n    }, [id]);\n\n    return { data: pokemon, meta };\n};\n\nexport default usePokemon;\n","// Utils Params\nimport { URL_POKEAPI } from \"../../../../utils/constants\";\n\nexport const getPokemonAPIUrl = (id: string): string => URL_POKEAPI + id;\n","// Utils\nimport { getImagePokemonUrl } from \"../../../../utils/url\";\n\n// Types\nimport { PokemonsAPIResQueryByIdType, PokemonType } from \"../../types\";\n\nexport const getPokemonAPIData = (\n    response: PokemonsAPIResQueryByIdType\n): PokemonType => {\n    return {\n        id: response.id,\n        name: response.name,\n        urlImg: getImagePokemonUrl(response.id),\n        height: response.height,\n        weight: response.weight,\n        stats: response.stats,\n        maxStat: Math.max(...response.stats.map((stat) => stat.base_stat)),\n    };\n};\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n// Components\nimport NavigationBar from \"./NavigationBar\";\nimport PokemonImage from \"./PokemonImage\";\nimport PokemonInformation from \"./PokemonInformation\";\nimport PokemonStatsGraph from \"./PokemonStatsGraph\";\nimport Loading from \"../../components/Loading\";\n\n// Hooks\nimport usePokemon from \"./hooks/usePokemon\";\n\n// Types\nimport { PokemonUseParamsType } from \"./types\";\n\nconst Pokemon = () => {\n    const { idPokemon }: PokemonUseParamsType = useParams();\n    const { data, meta } = usePokemon({ id: idPokemon });\n\n    if (meta.status === \"loading\") {\n        return <Loading></Loading>;\n    }\n    return (\n        <>\n            <NavigationBar id={data.id} name={data.name} />\n            <div className=\"container\">\n                <div className=\"pokemon--info\" id=\"pokemon-info\">\n                    <PokemonImage urlImg={data.urlImg} name={data.name} />\n                    <PokemonInformation\n                        information={{\n                            id: data.id,\n                            name: data.name,\n                            height: data.height,\n                            weight: data.weight,\n                        }}\n                    />\n                    <PokemonStatsGraph\n                        stats={data.stats}\n                        maxStat={data.maxStat}\n                    />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Pokemon;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Images\nimport logo from \"../assets/img/logo.png\";\n\nconst Header = () => {\n    return (\n        <header>\n            <Link to=\"/\">\n                <img src={logo} alt=\"logo Pokedex\" className=\"header-logo\" />\n                <h1>PokéDex</h1>\n            </Link>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// Components\nimport AllPokemons from \"./screens/Pokemons/index\";\nimport Pokemon from \"./screens/Pokemon/index\";\nimport Header from \"./templates/Header\";\n\nconst App = () => {\n    return (\n        <Router>\n            <Header />\n            <Switch>\n                <Route path=\"/pokemon/:idPokemon\">\n                    <Pokemon />\n                </Route>\n                <Route path=\"/\">\n                    <AllPokemons />\n                </Route>\n            </Switch>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/style.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}